"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[237],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),h=r,f=p["".concat(c,".").concat(h)]||p[h]||d[h]||i;return n?o.createElement(f,a(a({ref:t},u),{},{components:n})):o.createElement(f,a({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2026:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:30,title:"Project Outline"},c="Project Outline",l={unversionedId:"project-outline",id:"project-outline",title:"Project Outline",description:"This is a brief overview of the various files and folders in the project and the purposes they serve.",source:"@site/docs/project-outline.md",sourceDirName:".",slug:"/project-outline",permalink:"/dragon-game/docs/project-outline",draft:!1,tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30,title:"Project Outline"},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/dragon-game/docs/configuration"},next:{title:"State Outline",permalink:"/dragon-game/docs/state-outline"}},u={},d=[],p={toc:d};function h(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"project-outline"},"Project Outline"),(0,i.kt)("p",null,"This is a brief overview of the various files and folders in the project and the purposes they serve."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Dragon Game\n\u251c\u2500\u2500 .github\n\u2502   \u2514\u2500\u2500 workflows - This folder holds any workflow scripts that run when changes are pushed to GitHub.\n\u251c\u2500\u2500 docs - This is the root of the documentation site.\n\u2502   \u251c\u2500\u2500 docs - The folder of markdown files that are turned into the doc site.\n\u2502   \u251c\u2500\u2500 src - Scripts and components used by the doc site.\n\u2502   \u2514\u2500\u2500 static - A folder containing public assets used by the docs.\n\u251c\u2500\u2500 src - This is the codebase of the game.\n\u2502   \u251c\u2500\u2500 client - This contains scripts that get placed into StarterPlayer.StarterPlayerScripts.\n\u2502   \u251c\u2500\u2500 server - This contains scripts that get placed into ServerScriptService and are hidden from the client.\n\u2502   \u2502   \u251c\u2500\u2500 Actions - Server-exclusive actions that can be dispatched to the Rodux store.\n\u2502   \u2502   \u2514\u2500\u2500 Modules - Systems that run game logic not driven by player input.\n\u2502   \u2514\u2500\u2500 shared - This contains modules that get placed into ReplicatedStorage and can be used by both the server and the client.\n\u2502       \u251c\u2500\u2500 Actions - Shared actions that can be dispatched on the server, replicating to clients, or dispatched on the client, not replicating anywhere else.\n\u2502       \u251c\u2500\u2500 Checks - Contains checks that verify if a remote call has provided valid input.\n\u2502       \u251c\u2500\u2500 Components - Roact components used to build the UI.\n\u2502       \u251c\u2500\u2500 Constants - Unchanging values centralized into one easy-to-modify location.\n\u2502       \u251c\u2500\u2500 Modules - Stateful modules with side effects that the client needs to be able to interact with.\n\u2502       \u251c\u2500\u2500 Reducers - A tree of modules that describe how to modify the state of the Rodux store when actions are dispatched.\n\u2502       \u251c\u2500\u2500 Selectors - Helper functions for rapidly grabbing info from the Rodux store.\n\u2502       \u2514\u2500\u2500 Utilities - Stateless functions that are used across the game.\n\u251c\u2500\u2500 .gitignore - A list of files and directories that shouldn't be synced to GitHub.\n\u251c\u2500\u2500 LICENSE - This project is open-sourced under the MPL-2.0 license.\n\u251c\u2500\u2500 README.md - An introduction to this project.\n\u251c\u2500\u2500 TestExecution.lua - A script used by the automated testing workflow to run the testing suite. This can also be pasted into the Studio command bar to run the test suite without pushing.\n\u251c\u2500\u2500 client.ovpn - Used by the automated testing workflow to VPN into a static IP address with a valid authentication token to install and open Studio.\n\u251c\u2500\u2500 default.project.json - Describes to Rojo how a Roblox place should be built from the file tree.\n\u251c\u2500\u2500 foreman.toml - A list of tools that Foreman should automatically install.\n\u251c\u2500\u2500 selene.toml - Tells the linter which additional config files to look for.\n\u251c\u2500\u2500 testez.toml - Linting rules related to the TestEZ testing library.\n\u251c\u2500\u2500 wally.exe - A custom build of Wally that is temporarily in place until dev dependencies are fixed. Use this with `./wally` anywhere you would normally use `wally`.\n\u251c\u2500\u2500 wally.lock - A lockfile that determines exactly which packages should be installed by Wally.\n\u2514\u2500\u2500 wally.toml - A list of dependencies that need to be downloaded before the project can run.\n")))}h.isMDXComponent=!0}}]);